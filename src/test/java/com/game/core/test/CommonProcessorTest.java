package com.game.core.test;

import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;

import com.game.base.dao.BaseTestCase;
import com.game.core.GameMemory;
import com.game.core.action.bomb.CommonProcessor;
import com.game.core.action.processor.PlayerInfoProcessorHelper;
import com.game.utils.CommonUtils;

public class CommonProcessorTest extends BaseTestCase {

	@Autowired
	CommonProcessor				commonProcessor;

	@Autowired
	PlayerInfoProcessorHelper	playerInfoProcessorHelper;

	public Properties readProperties() throws IOException {
		Properties prop = new Properties();
		ClassLoader loader = Thread.currentThread().getContextClassLoader();
		InputStream stream = loader.getResourceAsStream("test.properties");
		prop.load(stream);
		return prop;
	}

	@Test
	public void uploadPlayerInfoTest() throws IOException {
		Properties prop = readProperties();
		setOnlineUser(3L);
		GameMemory.LOCAL_SESSION_CONTEXT.get().setAction("uploadPlayerInfo");
		commonProcessor.uploadPlayerInfo(prop.get("uploadPlayerInfo"), new HashMap<String, Object>());
	}

	@Test
	public void downloadPlayerInfoTest() throws Exception {
		setOnlineUser(3L);
		GameMemory.LOCAL_SESSION_CONTEXT.get().setAction("downloadPlayerInfo");
		Map map = new HashMap<String, Object>();
		playerInfoProcessorHelper.innerDownloadPlayerInfo(map);

		System.out.println(CommonUtils.toJson(map));
	}

	@Test
	public void testVerifyReceipt() {
		setOnlineUser(3L);
		GameMemory.LOCAL_SESSION_CONTEXT.get().setAction("receiptData");
		String data = "{\"data\":\"ewoJInNpZ25hdHVyZSIgPSAiQXBpSWVBckVJVUVFNVhTdG82ZkYzVTltU01UVGtRQjhDckRBNnF1akVSL2pRL0VPS3RWMlV5UERVaWJsMytlOVZhZEErUUl5QW1xeFZjeFFOQ3VJY0FySTU3TFBEN3EzUlRYUCt5aVVQeHhZQjZ5azVlMmZMbFJMdzRodGNTMVZnb1FkL1hCYjQ0U05BRlFpQlhTWUZTTExjUVlmRzNnaXgwcm5Od2Y5cUpxTkFBQURWekNDQTFNd2dnSTdvQU1DQVFJQ0NHVVVrVTNaV0FTMU1BMEdDU3FHU0liM0RRRUJCUVVBTUg4eEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUtEQXBCY0hCc1pTQkpibU11TVNZd0pBWURWUVFMREIxQmNIQnNaU0JEWlhKMGFXWnBZMkYwYVc5dUlFRjFkR2h2Y21sMGVURXpNREVHQTFVRUF3d3FRWEJ3YkdVZ2FWUjFibVZ6SUZOMGIzSmxJRU5sY25ScFptbGpZWFJwYjI0Z1FYVjBhRzl5YVhSNU1CNFhEVEE1TURZeE5USXlNRFUxTmxvWERURTBNRFl4TkRJeU1EVTFObG93WkRFak1DRUdBMVVFQXd3YVVIVnlZMmhoYzJWU1pXTmxhWEIwUTJWeWRHbG1hV05oZEdVeEd6QVpCZ05WQkFzTUVrRndjR3hsSUdsVWRXNWxjeUJUZEc5eVpURVRNQkVHQTFVRUNnd0tRWEJ3YkdVZ1NXNWpMakVMTUFrR0ExVUVCaE1DVlZNd2daOHdEUVlKS29aSWh2Y05BUUVCQlFBRGdZMEFNSUdKQW9HQkFNclJqRjJjdDRJclNkaVRDaGFJMGc4cHd2L2NtSHM4cC9Sd1YvcnQvOTFYS1ZoTmw0WElCaW1LalFRTmZnSHNEczZ5anUrK0RyS0pFN3VLc3BoTWRkS1lmRkU1ckdYc0FkQkVqQndSSXhleFRldngzSExFRkdBdDFtb0t4NTA5ZGh4dGlJZERnSnYyWWFWczQ5QjB1SnZOZHk2U01xTk5MSHNETHpEUzlvWkhBZ01CQUFHamNqQndNQXdHQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVVOaDNvNHAyQzBnRVl0VEpyRHRkREM1RllRem93RGdZRFZSMFBBUUgvQkFRREFnZUFNQjBHQTFVZERnUVdCQlNwZzRQeUdVakZQaEpYQ0JUTXphTittVjhrOVRBUUJnb3Foa2lHOTJOa0JnVUJCQUlGQURBTkJna3Foa2lHOXcwQkFRVUZBQU9DQVFFQUVhU2JQanRtTjRDL0lCM1FFcEszMlJ4YWNDRFhkVlhBZVZSZVM1RmFaeGMrdDg4cFFQOTNCaUF4dmRXLzNlVFNNR1k1RmJlQVlMM2V0cVA1Z204d3JGb2pYMGlreVZSU3RRKy9BUTBLRWp0cUIwN2tMczlRVWU4Y3pSOFVHZmRNMUV1bVYvVWd2RGQ0TndOWXhMUU1nNFdUUWZna1FRVnk4R1had1ZIZ2JFL1VDNlk3MDUzcEdYQms1MU5QTTN3b3hoZDNnU1JMdlhqK2xvSHNTdGNURXFlOXBCRHBtRzUrc2s0dHcrR0szR01lRU41LytlMVFUOW5wL0tsMW5qK2FCdzdDMHhzeTBiRm5hQWQxY1NTNnhkb3J5L0NVdk02Z3RLc21uT09kcVRlc2JwMGJzOHNuNldxczBDOWRnY3hSSHVPTVoydG04bnBMVW03YXJnT1N6UT09IjsKCSJwdXJjaGFzZS1pbmZvIiA9ICJld29KSW05eWFXZHBibUZzTFhCMWNtTm9ZWE5sTFdSaGRHVXRjSE4wSWlBOUlDSXlNREV6TFRFeExURXdJREF5T2pBME9qRTFJRUZ0WlhKcFkyRXZURzl6WDBGdVoyVnNaWE1pT3dvSkluVnVhWEYxWlMxcFpHVnVkR2xtYVdWeUlpQTlJQ0kzWVRJM1lUYzVNVEF3TXprd09EazJNR0l5Tm1NeE5tRmlaamcwWkRReU1ERmxOalJoTlRFMUlqc0tDU0p2Y21sbmFXNWhiQzEwY21GdWMyRmpkR2x2YmkxcFpDSWdQU0FpTVRBd01EQXdNREE1TWpnd056WXlOU0k3Q2draVluWnljeUlnUFNBaU1TNHdJanNLQ1NKMGNtRnVjMkZqZEdsdmJpMXBaQ0lnUFNBaU1UQXdNREF3TURBNU1qZ3dOell5TlNJN0Nna2ljWFZoYm5ScGRIa2lJRDBnSWpFaU93b0pJbTl5YVdkcGJtRnNMWEIxY21Ob1lYTmxMV1JoZEdVdGJYTWlJRDBnSWpFek9EUXdOemM0TlRVd05EUWlPd29KSW5WdWFYRjFaUzEyWlc1a2IzSXRhV1JsYm5ScFptbGxjaUlnUFNBaVF6WXhOVFkyT0VZdFFUQkRNaTAwTTBRNExUazBRalF0TkVVd09ESTRRa1l5TUVGQklqc0tDU0p3Y205a2RXTjBMV2xrSWlBOUlDSXhNRjlwYm1kdmRDSTdDZ2tpYVhSbGJTMXBaQ0lnUFNBaU56UXhNamN6T1RReElqc0tDU0ppYVdRaUlEMGdJbWhoY0hCNWNHRnZjR0Z2ZEdGdVp5STdDZ2tpY0hWeVkyaGhjMlV0WkdGMFpTMXRjeUlnUFNBaU1UTTROREEzTnpnMU5UQTBOQ0k3Q2draWNIVnlZMmhoYzJVdFpHRjBaU0lnUFNBaU1qQXhNeTB4TVMweE1DQXhNRG93TkRveE5TQkZkR012UjAxVUlqc0tDU0p3ZFhKamFHRnpaUzFrWVhSbExYQnpkQ0lnUFNBaU1qQXhNeTB4TVMweE1DQXdNam93TkRveE5TQkJiV1Z5YVdOaEwweHZjMTlCYm1kbGJHVnpJanNLQ1NKdmNtbG5hVzVoYkMxd2RYSmphR0Z6WlMxa1lYUmxJaUE5SUNJeU1ERXpMVEV4TFRFd0lERXdPakEwT2pFMUlFVjBZeTlIVFZRaU93cDkiOwoJImVudmlyb25tZW50IiA9ICJTYW5kYm94IjsKCSJwb2QiID0gIjEwMCI7Cgkic2lnbmluZy1zdGF0dXMiID0gIjAiOwp9\",\"action\":\"receiptData\"}";
		Map map = new HashMap<String, Object>();
		commonProcessor.verifyReceiptData(data, map);
		
		System.out.println(CommonUtils.toJson(map));
	}
}
